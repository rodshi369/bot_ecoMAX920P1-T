# -*- coding: utf-8 -*-
import psutil
import os
import sys
import datetime
import time
import sqlite3
import csv
import json

import bible
import const
import db
import asyncio

import telebot
from telebot import types

from pyqadmin import admin
import win32serviceutil
import multiprocessing

import threading
import queue
import set
import psutil

from pyplumio.const import AlertType
import reader_plum
import app_logger

import gpt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logger = app_logger.get_logger(__name__)
# logger.info("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã.")
#
bot = telebot.TeleBot(set.TOKEN)
########### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.init_db()
db.init_db_passing()

# _ON = True
quefirst = multiprocessing.Queue()
# que = queue.Queue()
# que = multiprocessing.Queue
STREAM = []


# @bot.callback_query_handler(func=lambda call: True)
# def callback_function1(callback_obj):
#     if callback_obj.data == "button1":
#         bot.send_message(callback_obj.from_user.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 1")
#     else:
#         bot.send_message(callback_obj.from_user.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 2")
#     bot.answer_callback_query(callback_query_id=callback_obj.id)

class Dispatcher():
    global STREAM
    thread = ""

    def __init__(self):
        self._running = True

    def terminate(self):
        self._running = False

    def run(self, id, quefirst):
        que = multiprocessing.Queue()
        que = True
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"))
        to_pin = bot.send_message(id, '–ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ...', reply_markup=markup).message_id

        t2 = multiprocessing.Process(target=survey.survey, args=(id, que, to_pin, markup))
        t2.start()
        time.sleep(5)
        first_survey_point = True
        while self._running and quefirst:
            with open('survey_point.json', 'r', encoding='utf-8') as f:  # –æ—Ç–∫—Ä—ã–ª–∏ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
                try:
                    param = json.load(f)
                except IOError as e:
                    print("I/O error({0}): {1}".format(e.errno, e.strerror))

            tektime = datetime.datetime.now()
            rrr = datetime.datetime.strptime(param["survey_point"], '%Y-%m-%d %H:%M:%S.%f')
            delta = tektime - rrr
            print(tektime, rrr, delta)
            # if first_survey_point:
            #     to_pin = que.get()
            if delta.seconds > 40 and not first_survey_point:
                t2.terminate()
                time.sleep(2)
                t2.close()
                # try:
                #     bot.delete_message(chat_id=id, message_id=to_pin)
                # except Exception as err:
                #     logger.error("–û—à–∏–±–∫–∞ —É–¥–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: . {err}".format(err=err.args[0]))
                logger.error("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞.")
                t2 = multiprocessing.Process(target=survey.survey, args=(id, que, to_pin, markup))
                t2.start()
                print("–û–ø—Ä–æ—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
            first_survey_point = False
            time.sleep(15)
        que = False
        t2.terminate()
        time.sleep(2)
        t2.close()


class Survey():
    global STREAM

    def __init__(self):
        self._running = True

    def terminate(self):
        self._running = False

    def survey(self, id, que, to_pin, markup):
        self._running = True
        # markup = types.InlineKeyboardMarkup()
        # markup.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"))
        # try:
        #     to_pin = bot.send_message(id, '–ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ...', reply_markup=markup).message_id
        #     que.put(to_pin)
        # except Exception as err:
        #     logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ. {err}".format(err=err.args[0]))
        t = time.localtime()
        _time = time.strftime("%H:%M:%S", t)

        predvalue = {"heating_temp": (0, 0),
                     "current_temp": (0, 0),
                     "return_temp": (0, 0),
                     "exhaust_temp": (0, 0),
                     "time": _time}
        arrow_up = "‚Üë"
        arrow_down = "‚Üì"
        qqq = 0
        while que:
            # –û—Ç–∫–ª—é—á–∏–º –æ–ø—Ä–æ—Å
            qqq += 1

            # t = datetime.datetime.now()
            # que.put(t)
            # que.send([t])

            # self.getTime()
            # try:
            #     data_ = asyncio.run(reader_plum.run())
            # except Exception as err:
            #     logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ state {err}", err=err)
            # finally:
            #     print("–ë—ã–¥—ã—â—å", data_["dt"])
            #
            listparam = [["ecomax_control", "state", "heating_temp", "heating_target", "return_temp", "feeder_temp", "exhaust_temp", "water_heater_temp", "heating_pump",
                          "fan_power", "boiler_load", "outside_temp",
                          "pending_alerts", "alarm", "lighter","regdata"],
                         ["current_temp", "target_temp"]]

            data_ = asyncio.run(reader_plum.getparameter(listparam))

            checklist = bible.checkingdict(listparam, data_)
            if checklist.__len__() != 0:
                print("–ù–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã {l}".format(l=checklist))
                time.sleep(3)
                continue
            # –ó–∞–ø–∏—à–µ–º —Ç–æ—á–∫—É –æ–ø—Ä–æ—Å–∞
            with open('survey_point.json', 'w', encoding='utf-8') as f:  # –æ—Ç–∫—Ä—ã–ª–∏ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
                try:
                    # t = time.strftime("%H:%M:%S", time.localtime())
                    t = datetime.datetime.now()
                    param = {"survey_point": str(t)}

                    json.dump(param, f, ensure_ascii=False)  # –∑–∞–≥–Ω–∞–ª–∏ –≤—Å–µ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                except IOError as e:
                    print("I/O error({0}): {1}".format(e.errno, e.strerror))

            # que.put(data_)
            # try:
            #     txtstate = const.DeviceStateRus[data_["state"]]
            # except Exception as err:
            #     logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ state  {err}".format(err=err))

            # txtstate = const.DeviceStateRus[data_["state"]]
            perekur = "\U0001F6AC"
            # perekur = '\N{cigarette}'
            # per = '\N{"Sauropod"}'
            if const.DeviceStateRus[data_["state"]] == "–û–∂–∏–¥–∞–Ω–∏–µ":
                perekur = "\U0001F6AC"
            else:
                perekur = ""

            if data_["fan_power"] > 0:
                veter = "\U0001F4A8"
            else:
                veter = ""
            # veter = "\U0001F4A8"

            txtstate = (const.DeviceStateRus[data_["state"]] + " {fl}").format(fl=('üî•' if data_["lighter"] else '') + perekur)

            heating_temp_trend = data_["heating_temp"] - predvalue["heating_temp"][0]
            heating_temp_trend = str(round(heating_temp_trend, 2)) + arrow_up if heating_temp_trend >= predvalue["heating_temp"][1] else str(
                round(heating_temp_trend, 2)) + arrow_down

            current_temp_trend = data_['current_temp'] - predvalue["current_temp"][0]
            current_temp_trend = str(round(current_temp_trend, 2)) + arrow_up if current_temp_trend >= predvalue["current_temp"][1] else str(
                round(current_temp_trend, 2)) + arrow_down

            return_temp_trend = data_["return_temp"] - predvalue["return_temp"][0]
            return_temp_trend = str(round(return_temp_trend, 2)) + arrow_up if return_temp_trend >= predvalue["return_temp"][1] else str(
                round(return_temp_trend, 2)) + arrow_down

            exhaust_temp_trend = data_["exhaust_temp"] - predvalue["exhaust_temp"][0]
            exhaust_temp_trend = str(round(exhaust_temp_trend, 2)) + arrow_up if exhaust_temp_trend >= predvalue["exhaust_temp"][1] else str(
                round(exhaust_temp_trend, 2)) + arrow_down

            t = time.localtime()
            _time = time.strftime("%H:%M:%S", t)
            # q.put( datetime.datetime.now())

            # –û—Ç—Å–ª–µ–¥–∏–º —Ç—Ä–µ–≤–æ–≥—É
            # if data_["ecomax_control"] == "on" and data_["alarm"]:
            #     text_alerts = "*–û–ø–æ–≤–µ—â–µ–Ω–∏–µ:* " + AlertType(data_["pending_alerts"]).name.replace("_", " ") + " —Ç—Ä–µ–≤." + str(data_["alarm"]) + " " + str(
            #         qqq) + " –∫–æ–Ω—Ç." + str(data_["gcz_contact"]) + " –∑–∞–∂–∏–≥." + str(data_["lighter"])
            # else:
            #     text_alerts = ""
            text_alerts = ""
            # to_pin_alarm = bot.send_message(id, text=text_alerts, parse_mode="Markdown").message_id

            textdata = "*–û–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã:*" + _time + \
                       " (" + (datetime.datetime.strptime(_time, "%H:%M:%S") - datetime.datetime.strptime(predvalue["time"], "%H:%M:%S")).seconds.__str__() + "—Å–µ–∫.)" + \
                       "\n–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:  " + txtstate + \
                       "\n–¢–µ–º–ø.–∫–æ—Ç–ª–∞:    " + str(round(data_["heating_temp"], 2)) + " (" + str(data_["heating_target"]) + "); " + heating_temp_trend + \
                       "\n–¢–µ–º–ø.—Å–º–µ—Å–∏—Ç.:  " + str(round(data_['current_temp'], 2)) + " (" + str(data_["target_temp"]) + "); " + current_temp_trend + \
                       "\n–¢–µ–º–ø.–≤–æ–∑–≤—Ä.:   " + str(round(data_["return_temp"], 2)) + "; " + return_temp_trend + \
                       "\n–¢–µ–º–ø.–ø—Ä–æ–¥.–≥–æ—Ä–µ–Ω.: " + str(round(data_["exhaust_temp"], 2)) + "; " + exhaust_temp_trend + \
                       "\n–¢–µ–º–ø.–ø–æ–¥–∞—á–∏ —Ç–æ–ø–ª.: " + str(round(data_["feeder_temp"], 2)) + \
                       "\n–¢–µ–º–ø.–ì–í–°:                    " + str(round(data_["water_heater_temp"], 2)) + \
                       "\n–ù–∞—Å–æ—Å:                          " + ("–í–∫–ª" if data_["heating_pump"] else "–í—ã–∫–ª    ") + \
                       "\n–ú–æ—â-—Ç—å –≤–µ–Ω—Ç–∏–ª.:       " + str(round(data_["fan_power"], 2)) + " % " + veter + \
                       "\n–ú–æ—â-—Ç—å –∫–æ—Ç–ª–∞:          " + str(data_["boiler_load"]) + " %" + \
                       "\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–ø–∞–Ω–∞:     " + str(data_["regdata"][182]) + " %" + \
                       "\n–¢–µ–º–ø.—Å –Ω–∞—Ä—É–∂–∏:           " + str(round(data_["outside_temp"], 2)) + \
                       "\n" + text_alerts

            predvalue = {"heating_temp": (round(data_["heating_temp"], 2), float(heating_temp_trend[:-1])),
                         "current_temp": (round(data_['current_temp'], 2), float(current_temp_trend[:-1])),
                         "return_temp": (round(data_["return_temp"], 2), float(return_temp_trend[:-1])),
                         "exhaust_temp": (round(data_["exhaust_temp"], 2), float(exhaust_temp_trend[:-1])),
                         "time": _time}
            try:
                bot.edit_message_text(chat_id=id, message_id=to_pin, text=textdata, reply_markup=markup, parse_mode="Markdown")
            except Exception as err:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞. {err}".format(err=err.args[0]))
            time.sleep(15)

        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.")
        try:
            bot.delete_message(chat_id=id, message_id=to_pin)
        except Exception as err:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è : –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞. {err}".format(err=err.args[0]))


dispatcher = Dispatcher()
survey = Survey()


def restart_program():
    try:
        for i in STREAM:
            # Terminate each process
            i.terminate()
            i.close()
        # os.system('python bible.py')

        # os.system('runas /user:–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä D:/nssm-2.24/win64/nssm restart "bot_plum"')
        # os.system('D:/nssm-2.24/win64/nssm restart "bot_plum"')
    except Exception as err:
        logger.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ë–æ—Ç–∞. {err}".format(err=err.args[0]))


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    answer = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    select = call.data
    # message = call.data[1]
    if select == "–û—Ç–º–µ–Ω–∞":
        try:
            bot.answer_callback_query(callback_query_id=call.id, text='–û—Ç–±–æ–π')
        except Exception as err:
            logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –û—Ç–º–µ–Ω–∞. {err}".format(err=err.args[0]))
        # answer = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'

    elif select == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":
        # list(multiprocessing.process.active_children())[0].terminate()
        # dispatcher.terminate()
        # survey.terminate()
        # globals()["STREAM"][0].terminate()
        # globals()["STREAM"][0].close()
        # globals()["STREAM"] = []
        quefirst = False
        try:
            bot.answer_callback_query(callback_query_id=call.id, text='–û—Å—Ç–∞–Ω–æ–≤–∫–∞')
        except Exception as err:
            logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. {err}".format(err=err.args[0]))
        # answer = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'

    elif select == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç":
        logger.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞")
        restart_program()
        try:
            # os.system('D:/nssm-2.24/win64/nssm restart "bot_plum"')
            bot.answer_callback_query(callback_query_id=call.id, text='–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫')
        except Exception as err:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç. {err}".format(err=err.args[0]))

        answer = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'

    elif select == "–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä":
        bot.answer_callback_query(callback_query_id=call.id, text='ShutDown')
        os.system("shutdown /s /t 1")
        # answer = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'

    elif select == '–í–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä':
        # await reader_plum.OnOff("–í–∫–ª")
        asyncio.run(reader_plum.OnOff("–í–∫–ª"))
        try:
            bot.answer_callback_query(callback_query_id=call.id, text="–í–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä")
        except Exception as err:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –í–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä. {err}".format(err=err.args[0]))
        answer = '–í–∫–ª—é—á–µ–Ω–æ'

    elif select == '–û—Ç–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä':
        # await reader_plum.OnOff("–í—ã–∫–ª")
        asyncio.run(reader_plum.OnOff("–í—ã–∫–ª"))
        try:
            bot.answer_callback_query(callback_query_id=call.id, text="–û—Ç–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä")
        except Exception as err:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –û—Ç–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä. {err}".format(err=err.args[0]))
        answer = "–í—ã–∫–ª—é—á–µ–Ω–æ"

    #################################### contour
    elif select == '–ö—Ä–∏–≤–∞—è –Ω–∞–≥—Ä–µ–≤–∞ –∫–æ–Ω—Ç—É—Ä–∞':
        msg = bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ -: –ö—Ä–∏–≤–∞—è –Ω–∞–≥—Ä–µ–≤–∞ –∫–æ–Ω—Ç—É—Ä–∞")
        bot.register_next_step_handler(msg, writer, id=('heating_curve', 'QDoubleSpinBox', 'mixer', msg,))

    elif select == '–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ –∫–æ–Ω—Ç—É—Ä–∞':
        msg = bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ -–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ –∫–æ–Ω—Ç—É—Ä–∞:")
        bot.register_next_step_handler(msg, writer, id=('heating_curve_shift', 'QSpinBox', 'mixer', msg,))

        ################################ boiler
    elif select == '–ö—Ä–∏–≤–∞—è –Ω–∞–≥—Ä–µ–≤–∞':
        msg = bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –ö—Ä–∏–≤–∞—è –Ω–∞–≥—Ä–µ–≤–∞")
        bot.register_next_step_handler(msg, writer, id=('heating_curve', 'QDoubleSpinBox', ' ', msg,))

    elif select == "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥":
        msg = bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥")
        bot.register_next_step_handler(msg, writer, id=('heating_curve_shift', 'QSpinBox', '', msg,))

    elif select == "–ò–Ω—Ñ–∞":
        get_channel_info(call)
    else:
        pass
    try:
        id_m = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=answer,
                                     reply_markup=None).message_id
        bot.delete_message(chat_id=call.message.chat.id, message_id=id_m)
    except Exception as err:
        logger.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. {err}".format(err=err.args[0]))


def writer(message, id):
    if message.text.replace(',', '').isdigit() or message.text.replace('.', '').isdigit():
        rez = asyncio.run(reader_plum.writer(message, id))
    else:
        bot.delete_message(chat_id=message.chat.id, message_id=message.id)

    bot.delete_message(chat_id=message.chat.id, message_id=id[3].id)

    ip_mes = bot.send_message(chat_id=message.chat.id, text="–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. ").message_id
    time.sleep(5)
    bot.delete_message(message.chat.id, ip_mes)


class User:
    def __init__(self, id):
        self.id = id
        self.code = None
        self.password = None


user = User(None)


def _init_propusk():
    query = """SELECT userid,  first_name, last_name, username, pass, datareg FROM users;"""
    otvet = {}
    rez = db.get_record(query, "")
    one_result = rez.fetchall()
    # one_result[0]
    if one_result.__len__() > 0:
        i = 0
        for i in range(0, one_result.__len__()):
            # one_result[i] = one_result[i] + (False, 0)
            otvet[str(one_result[i][0])] = {"userid": one_result[i][0], "first_name": one_result[i][1],
                                            "last_name": one_result[i][2], "username": one_result[i][3],
                                            "pass": one_result[i][4], "datareg": one_result[i][5], "active": False}
            i += 1
    else:
        pass
    return otvet


isauthorized = _init_propusk()


######################################################################################### –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
def inputpass(message, schet):
    if schet == 1:
        suffix = ' (–ø–æ–ø—Ä–æ–±—É–π 123)'
    elif schet == 2:
        suffix = ' (qwerty –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ)'
    else:
        suffix = ""
    bot.send_message(message.from_user.id, "–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ" + str(schet + 1) + suffix)
    msg = bot.reply_to(message, """–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:""")
    bot.register_next_step_handler(msg, verifypass, schet)


def verifypass(message, schet):
    if message.text == str(isauthorized[str(message.from_user.id)]["pass"]):
        bot.send_message(message.chat.id, "–ù–µ–±–æ—Å—å —É–≥–∞–¥–∞–ª.")
        isauthorized[str(message.chat.id)]["active"] = True
        bot.delete_message(message.chat.id, message.id)
        mainmenu(message)
    else:
        schet = schet + 1
        if schet <= 2:
            inputpass(message, schet)
        else:
            bot.send_message(message.chat.id, "–í—ã –∫–∞–∫–æ–π —Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π.")
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)


######################################################################################### –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
def makeCSV(data):
    try:
        with open("temp.csv", mode="w", encoding="cp1251") as w_file:
            names = ["id", "dt", "lighting", "installed_lighting", "out1", "out3", "out4", "af1", "af2", "f1"]
            file_writer = csv.DictWriter(w_file, delimiter=";", lineterminator="\r", fieldnames=names)
            file_writer.writeheader()
            for rec in data:
                file_writer.writerow(
                    {"id": rec[0], "dt": rec[1], "lighting": rec[2], "installed_lighting": rec[3], "out1": rec[4],
                     "out3": rec[5], "out4": rec[6], "af1": rec[7], "af2": rec[8], "f1": rec[9]})

            return w_file
    except Exception as err:
        logger.error("–û—à–∏–±–∫–∞ {err}".format(err=err.args[0]))
        pass


@bot.message_handler(commands=['get_channel_info'])
def get_channel_info(message):
    channel_info = bot.get_chat(chat_id='-1001900996966')
    channel_info_ = bot.get_chat(chat_id='-1001948581163')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

    bot.send_message(message.from_user.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {channel_info.title}\n"
                                           f"–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {channel_info.description}\n"
                                           f"–¢–∏–ø —á–∞—Ç–∞: {channel_info.type}")


@bot.message_handler(commands=['help'])  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
def help(message):
    bot.reply_to(message, "–ë–æ–≥ —Ç–µ–±–µ –≤ –ø–æ–º–æ—â—å.")


@bot.message_handler(commands=['start'])  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
def start(message):
    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ
    dt = datetime.datetime.now()
    db.add_record_passing([message.from_user.id, message.from_user.first_name, message.from_user.last_name,
                           message.from_user.username, dt])
    #############################
    if isauthorized.get(str(message.from_user.id)) == None or isauthorized.__len__() == 0:
        registration(message)
    elif isauthorized[str(message.from_user.id)]["active"] is True:
        bot.send_message(message.chat.id, "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.")
        mainmenu(message)
        return
    else:
        schet = 0
        inputpass(message, schet)


########################################################################### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@bot.message_handler(commands=['reg'])  # –∫–æ–º–∞–Ω–¥–∞
def registration(message):
    bot.reply_to(message, "{who}\n–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.".format(who=message.from_user.first_name))
    try:
        chat_id = message.from_user.id
        name = message.text
        user = User(message.from_user.id)
        # user_dict[chat_id] = user
        bot.send_message(message.chat.id, '–ù–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç–∞—Ü–∏—é.')
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞')
        bot.register_next_step_handler(msg, process_code_step, user)
    except Exception as e:
        bot.reply_to(message, '–û–ø–∞–Ω—å–∫–∏(oooops)')


def process_code_step(message, user):
    try:
        chat_id = message.from_user.id
        user.code = message.text
        if user.code != '369':
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ë—É—Ä–∞—Ç–∏–Ω–æ.")
            return
        msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å?')
        bot.register_next_step_handler(msg, process_pass_step, user)
    except Exception as e:
        bot.reply_to(message, '–û–ø–∞–Ω—å–∫–∏(oooops')


def process_pass_step(message, user):
    try:
        chat_id = message.from_user.id
        name = message.text
        user.password = message.text
        db.add_record([message.from_user.id, message.from_user.first_name, message.from_user.last_name,
                       message.from_user.username, user.password, datetime.datetime.now()])

        isauthorized[str(message.from_user.id)] = {"userid": message.from_user.id,
                                                   "first_name": message.from_user.first_name,
                                                   "last_name": message.from_user.last_name,
                                                   "username": message.from_user.username,
                                                   "pass": user.password, "datareg": datetime.datetime.now(),
                                                   "active": True}
    except Exception as e:
        bot.reply_to(message, '–û–ø–∞–Ω—å–∫–∏(oooops')


########################################################################### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def checkregistration–∞vtorization(message):
    try:
        if message == None:
            query = "SELECT *  FROM users "
            param = {}
        else:
            # query = """SELECT userid, first_name, last_name, username  FROM users WHERE userid = :userid and first_name =:first_name and last_name = :last_name and username = :username"""
            query = "SELECT userid, first_name, last_name, username, pass, datareg  FROM users WHERE userid = :userid and first_name =:first_name"
            param = {"userid": message.from_user.id, "first_name": message.from_user.first_name}

        rez = db.get_record(query, param)
        one_result = rez.fetchall()
        if one_result.__len__() > 0:
            return [True, one_result, 0]
        else:
            return [False, one_result, 0]
    except sqlite3.Error as err:
        print(err)


def mainmenu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    btn1 = types.KeyboardButton("–û–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    # btn2 = types.KeyboardButton("–í–∫–ª")
    # btn3 = types.KeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø—Ä–æ—Å")
    btn4 = types.KeyboardButton("–ö–æ—Ç–µ–ª")
    btn5 = types.KeyboardButton("–ö–æ–Ω—Ç—É—Ä—ã")
    btn6 = types.KeyboardButton("–í–∫–ª/–í—ã–∫–ª")
    btn7 = types.KeyboardButton("Bot")
    # btn4 = types.KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    markup.add(btn1, btn4, btn5, btn6, btn7)

    id_mess = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup).message_id


def setpoints(message):
    id = message.chat.id

    to_pin = bot.send_message(id, '–ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ...').message_id
    listparam = [["ecomax_control", "state"]]
    data_ = asyncio.run(reader_plum.getparameter(listparam))

    checklist = bible.checkingdict(listparam, data_)
    if checklist.__len__() != 0:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–ª–∞. {err}".format(err=checklist))
        bot.delete_message(id, to_pin)
        ip_mes = bot.send_message(id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.").message_id
        time.sleep(5)
        bot.delete_message(id, ip_mes)
        return

    text = "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–º:*" + \
           "\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {a} {b}".format(a="–í–∫–ª." if data_["ecomax_control"].value == "on" else "–í—ã–∫–ª.", b=";  " + const.DeviceStateRus[data_["state"]])
    markup = types.InlineKeyboardMarkup()
    try:
        markup.add(types.InlineKeyboardButton(text='–í–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä', callback_data="–í–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä"))
        markup.add(types.InlineKeyboardButton(text='–û—Ç–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä', callback_data="–û—Ç–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä"))
        markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data="–û—Ç–º–µ–Ω–∞"))
        bot.edit_message_text(chat_id=id, message_id=to_pin, text=text, reply_markup=markup, parse_mode="Markdown")
    except Exception as err:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–ª–∞. {err}".format(err=err))
        bot.delete_message(id, to_pin)
        ip_mes = bot.send_message(id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.").message_id
        time.sleep(5)
        bot.delete_message(id, ip_mes)


def controlpanel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    btn1 = types.KeyboardButton("–ö–æ—Ç–µ–ª")
    btn2 = types.KeyboardButton("–ö–æ–Ω—Ç—É—Ä—ã")
    btn3 = types.KeyboardButton("–í–ö–õ/–í–´–ö–õ")
    btn4 = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)


def boiler(message):
    id = message.chat.id

    to_pin = bot.send_message(id, '–ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ...').message_id
    listparam = [["state", "weather_control", "heating_curve", "heating_curve_shift", "heating_temp", "heating_target", "fuel_level"]]
    data_ = asyncio.run(reader_plum.getparameter(listparam))
    checklist = bible.checkingdict(listparam, data_)
    if checklist.__len__() != 0:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–ª–∞. {err}".format(err=checklist))
        bot.delete_message(id, to_pin)
        ip_mes = bot.send_message(id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.").message_id
        time.sleep(5)
        bot.delete_message(id, ip_mes)
        return

    markup = types.InlineKeyboardMarkup()
    try:
        markup.add(types.InlineKeyboardButton(text='–ü–æ–≥–æ–¥–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ' +
                                                   "–í–∫–ª" if str(data_['weather_control'].value) == "on" else "–í—ã–∫–ª" + str(data_['weather_control'].value),
                                              callback_data="–ü–æ–≥–æ–¥–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"))
        markup.add(types.InlineKeyboardButton(text='–ö—Ä–∏–≤–∞—è –Ω–∞–≥—Ä–µ–≤–∞: ' + str(round(data_['heating_curve'].value, 2)),
                                              callback_data="–ö—Ä–∏–≤–∞—è –Ω–∞–≥—Ä–µ–≤–∞"))
        markup.add(types.InlineKeyboardButton(text='–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥: ' + str(data_['heating_curve_shift'].value),
                                              callback_data="–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥"))
        markup.add(types.InlineKeyboardButton(text='–í–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä', callback_data="–í–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä"))
        markup.add(types.InlineKeyboardButton(text='–û—Ç–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä', callback_data="–û—Ç–∫–ª.—Ä–µ–≥—É–ª—è—Ç–æ—Ä"))
        markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data="–û—Ç–º–µ–Ω–∞"))
        text = "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–ª–æ–º:*" + \
               "\n"+const.DeviceStateRus[data_["state"]] + \
               "\n–¢–µ–º–ø. –∫–æ—Ç–ª–∞:             " + str(round(data_["heating_temp"], 2)) + ";  –£—Å—Ç: " + str(data_["heating_target"]) + \
               "\n–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞: " + str(data_["fuel_level"]) + "%"

        bot.edit_message_text(chat_id=id, message_id=to_pin, text=text, reply_markup=markup, parse_mode="Markdown")
    except Exception as err:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–ª–∞. {err}".format(err=err))
        bot.delete_message(id, to_pin)
        ip_mes = bot.send_message(id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.").message_id
        time.sleep(5)
        bot.delete_message(id, ip_mes)


def contour(message):
    id = message.chat.id
    to_pin = bot.send_message(id, '–ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ...').message_id

    # data_ = asyncio.run(reader_plum.run())
    listparam = [['return_temp'], ['weather_control', 'heating_curve', 'heating_curve_shift', 'current_temp', 'target_temp']]
    data_ = asyncio.run(reader_plum.getparameter(listparam))
    checklist = bible.checkingdict(listparam, data_)
    if checklist.__len__() != 0:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–ª–∞. {err}".format(err=checklist))
        bot.delete_message(id, to_pin)
        ip_mes = bot.send_message(id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.").message_id
        time.sleep(5)
        bot.delete_message(id, ip_mes)
        return

    markup = types.InlineKeyboardMarkup()
    try:
        markup.add(types.InlineKeyboardButton(
            text='–ü–æ–≥–æ–¥–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ' + "–í–∫–ª" if str(data_['weather_control'].value) == "on" else "–í—ã–∫–ª" + str(
                data_['weather_control'].value), callback_data="–ü–æ–≥–æ–¥–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"))
        markup.add(types.InlineKeyboardButton(text='–ö—Ä–∏–≤–∞—è –Ω–∞–≥—Ä–µ–≤–∞ –∫–æ–Ω—Ç—É—Ä–∞: ' + str(round(data_['heating_curve'].value, 2)),
                                              callback_data="–ö—Ä–∏–≤–∞—è –Ω–∞–≥—Ä–µ–≤–∞ –∫–æ–Ω—Ç—É—Ä–∞"))
        markup.add(types.InlineKeyboardButton(text='–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ –∫–æ–Ω—Ç—É—Ä–∞: ' + str(data_['heating_curve_shift'].value),
                                              callback_data="–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ –∫–æ–Ω—Ç—É—Ä–∞"))
        # markup.add(types.InlineKeyboardButton(text='–ü–æ–≥–æ–¥–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ', callback_data="–ü–æ–≥–æ–¥–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"))
        # markup.add(types.InlineKeyboardButton(text='–ö—Ä–∏–≤–∞—è –Ω–∞–≥—Ä–µ–≤–∞: ', callback_data="–ö—Ä–∏–≤–∞—è –Ω–∞–≥—Ä–µ–≤–∞"))
        markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data="–û—Ç–º–µ–Ω–∞"))
        # bot.send_message(id, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", reply_markup=markup)
        bot.edit_message_text(chat_id=id, message_id=to_pin, text='*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º:*' +
                                                                  "\n–¢–µ–º–ø. —Å–º–µ—Å–∏—Ç–µ–ª—è:     " + str(round(data_['current_temp'], 2)) + "; –£—Å—Ç: " + str(
            data_['target_temp']) +
                                                                  "\n–¢–µ–º–ø. –≤–æ–∑–≤—Ä–∞—Ç–∞:      " + str(round(data_['return_temp'], 2))
                              , reply_markup=markup, parse_mode="Markdown")
    except Exception as err:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–ª–∞. {err}".format(err=err))
        bot.delete_message(id, to_pin)
        ip_mes = bot.send_message(id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.").message_id
        time.sleep(5)
        bot.delete_message(id, ip_mes)


def Bot(message):
    id = message.chat.id

    to_pin = bot.send_message(id, '–ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ...').message_id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–°–±—Ä–æ—Å–∏—Ç—å –æ–ø—Ä–æ—Å', callback_data="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"))
    markup.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç', callback_data='–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç'))
    markup.add(types.InlineKeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä', callback_data='–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä'))
    markup.add(types.InlineKeyboardButton(text='–ò–Ω—Ñ–∞ —Å –∫–∞–Ω–∞–ª–∞', callback_data='–ò–Ω—Ñ–∞'))
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data="–û—Ç–º–µ–Ω–∞"))
    text = "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:*"

    bot.edit_message_text(chat_id=id, message_id=to_pin, text=text, reply_markup=markup, parse_mode="Markdown")


# CHANNEL_NAME = '-1001909359532'
# # @bot.message_handler(content_types=['photo', 'text'])
# @bot.channel_post_handler(content_types=['text'])
# def repost_msg(message):
#
#     bot.copy_message(CHANNEL_NAME, message.chat.id, message.message_id)
#

@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    if isauthorized.get(str(message.from_user.id)) == None or isauthorized.__len__() == 0:
        dt = datetime.datetime.now()
        db.add_record_passing([message.from_user.id, message.from_user.first_name, message.from_user.last_name,
                               message.from_user.username, dt])
        registration(message)
    elif isauthorized[str(message.from_user.id)]["active"] is False:
        pass
    else:
        pass

    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        mainmenu(message)
        delete = bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    elif message.text == '–û–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è':
        dispatcher._running = True
        delete = bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        id = message.chat.id

        quefirst = True
        t1 = multiprocessing.Process(target=dispatcher.run, args=(id, quefirst))
        t1.start()
        globals()["STREAM"].append(t1)
        logger.info("–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {name}".format(name=t1.name))

    elif message.text == '–û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø—Ä–æ—Å':
        delete = bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    elif message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
        controlpanel(message)
        delete = bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    elif message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        mainmenu(message)
        delete = bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    elif message.text == "–í–∫–ª/–í—ã–∫–ª":
        setpoints(message)
        delete = bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    elif message.text == "–ö–æ—Ç–µ–ª":
        boiler(message)
        delete = bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    elif message.text == "–ö–æ–Ω—Ç—É—Ä—ã":
        contour(message)
        delete = bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    elif message.text == "Bot":
        Bot(message)
        delete = bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    else:
        # pass
        gpt.ask_gpt(message.text)
        bot.send_message(chat_id=message.chat.id, text=gpt.ask_gpt(message.text))


def startbot():
    logger.info("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã.")
    bot.infinity_polling(timeout=10, long_polling_timeout=5)


if __name__ == '__main__':
    startbot()
    #
    # bot = telebot.TeleBot(set.TOKEN)

    # logger.info("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã.")
    # multiprocessing.set_start_method('fork')

    # t = multiprocessing.Process(target=startbot)
    # t.start()
